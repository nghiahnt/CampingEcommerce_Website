openapi: 3.0.1
info:
  title: Ecommecer docs APIs
  # description: NS Checkin system REST API
  # termsOfService: http://swagger.io/terms/
  # contact:
  #   name: Hyperledger Team
  # license:
  #   name: Apache 2.0
  #   url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: https://swagger-ecommerce-camping.onrender.com
  - url: http://192.168.1.10:9999
  - url: http://localhost:9999
paths:
  /api/auth/login:
    post:
      tags:
        - authenticate
      summary: login
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
            example:
              "EMAIL": ""
              "PASSWORD": ""
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
    security:
      - JWT: []
  /api/auth/registerUser:
    post:
      tags:
        - auth
      summary: create account
      operationId: create account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
            example:
              "EMAIL": "dxhai.20it11@vku.udn.vn"

      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/auth/registerUser/verifyOtp:
    post:
      tags:
        - auth
      summary: verify account
      operationId: verify account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
            example:
              "EMAIL": ""
              "OTP": ""

      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/auth/refreshToken:
    post:
      tags:
        - auth
      summary: refeshToken
      operationId: refeshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
            example:
              "refeshToken": ""

      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
  /api/auth/changePassword:
    post:
      tags:
        - auth
      summary: change password
      operationId: change password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
            example:
              "oldPassword": "aaaa"
              "newPassword": "adadasdad"
              "reNewPassword": "adadasdad"

      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
  #logout
  /api/auth/logout:
    delete:
      tags:
        - auth
      summary: logout
      operationId: logout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
            example:
              "refreshToken": "asdaasd"

      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
    security:
      - JWT: []
  /api/menu/createMenu:
    post:
      tags:
        - menu
      summary: create menu
      operationId: create menu
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/menu"
            example:
              "TITLE": "aaaa"
              "PARENT_ID": ""

      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/menu/getAllMenu:
    get:
      tags:
        - menu
      summary: get all menu
      operationId: get all menu
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/menu/getMenuId/{menuId}:
    get:
      tags:
        - menu
      summary: get all menu
      operationId: get all menu
      parameters:
        - name: menuId
          in: path
          description: Please provide menuId
          required: true
          schema:
            type: string
            example: "1"
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/menu/updateMenu/{menuId}:
    patch:
      tags:
        - menu
      summary: update menu
      operationId: update menu
      parameters:
        - name: menuId
          in: path
          description: Please provide menuId
          required: true
          schema:
            type: string
            example: "1"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/menu"
            example:
              "TITLE": "aaaa"
              "PARENT_ID": ""

      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/menu/deleteMenu/{menuId}:
    delete:
      tags:
        - menu
      summary: delete menu
      operationId: delete menu
      parameters:
        - name: menuId
          in: path
          description: Please provide menuId
          required: true
          schema:
            type: string
            example: "1"
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []

  /api/gameCard/createGameCard:
    post:
      tags:
        - game card
      summary: create game card
      operationId: create game card
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                CONTENT:
                  type: string
                TYPE_CARD:
                  type: string
              required:
                - image
                - CONTENT
                - TYPE_CARD
            example:
              pdfFile: [binary-data]
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/gameCard/getAllGameCard:
    get:
      tags:
        - game card
      summary: get gameCard
      operationId: get gameCard
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/gameCard/getGameCardId/{gameCardId}:
    get:
      tags:
        - game card
      summary: get gameCard id
      operationId: get gameCard id
      parameters:
        - name: gameCardId
          in: path
          description: Please provide gameCard id
          required: true
          schema:
            type: string
            example: "1"
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/gameCard/updateGameCard/{gameCardId}:
    patch:
      tags:
        - game card
      summary: update game card
      operationId: update game card
      parameters:
        - name: gameCardId
          in: path
          description: Please provide gameCard id
          required: true
          schema:
            type: string
            example: "1"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                CONTENT:
                  type: string
                TYPE_CARD:
                  type: string
            example:
              pdfFile: [binary-data]
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/gameCard/deleteGameCard/{gameCardId}:
    delete:
      tags:
        - game card
      summary: delete gameCard id
      operationId: delete gameCard id
      parameters:
        - name: gameCardId
          in: path
          description: Please provide gameCard id
          required: true
          schema:
            type: string
            example: "1"
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/category/createCategory:
    post:
      tags:
        - Category
      summary: create Category
      operationId: create Category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
            example:
              "TITLE": "aaaa"
              "PARENT_ID": ""
              "CD": "aaaa"

      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/category/getAllCategory:
    get:
      tags:
        - Category
      summary: get all Category
      operationId: get all Category
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []

  /api/category/getCategoryId/{CategoryId}:
    get:
      tags:
        - Category
      summary: get  Category id
      operationId: get Category id
      parameters:
        - name: CategoryId
          in: path
          description: Please provide CategoryId
          required: true
          schema:
            type: string
            example: "1"
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/category/updateCategory/{CategoryId}:
    patch:
      tags:
        - Category
      summary: update Category
      operationId: update Category
      parameters:
        - name: CategoryId
          in: path
          description: Please provide CategoryId
          required: true
          schema:
            type: string
            example: "1"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
            example:
              "TITLE": "aaaa"
              "PARENT_ID": ""
              "CD": "aaaa"

      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/category/deleteCategory/{CategoryId}:
    delete:
      tags:
        - Category
      summary: delete Category
      operationId: delete Category
      parameters:
        - name: CategoryId
          in: path
          description: Please provide CategoryId
          required: true
          schema:
            type: string
            example: "1"
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []

  /api/profile/createProfile:
    post:
      tags:
        - Profile
      summary: create Profile
      operationId: create Profile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                FIRST_NAME:
                  type: string
                LAST_NAME:
                  type: string
                PHONE_NUMBER:
                  type: integer
                HOMETOWN:
                  type: string
              required:
                - image
            example:
              pdfFile: [binary-data]
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/profile/getAllProfile:
    get:
      tags:
        - Profile
      summary: get Profile
      operationId: get Profile
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/profile/getProfileId/{ProfileId}:
    get:
      tags:
        - Profile
      summary: get Profile id
      operationId: get Profile id
      parameters:
        - name: ProfileId
          in: path
          description: Please provide Profile id
          required: true
          schema:
            type: string
            example: "1"
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/profile/updateProfile/{ProfileId}:
    patch:
      tags:
        - Profile
      summary: update Profile
      operationId: update Profile
      parameters:
        - name: ProfileId
          in: path
          description: Please provide Profile id
          required: true
          schema:
            type: string
            example: "1"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                FIRST_NAME:
                  type: string
                LAST_NAME:
                  type: string
                PHONE_NUMBER:
                  type: integer
                HOMETOWN:
                  type: string
            example:
              pdfFile: [binary-data]
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/profile/deleteProfile/{ProfileId}:
    delete:
      tags:
        - Profile
      summary: delete Profile id
      operationId: delete Profile id
      parameters:
        - name: ProfileId
          in: path
          description: Please provide Profile id
          required: true
          schema:
            type: string
            example: "1"
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []

  /api/addressUser/createAddressUser:
    post:
      tags:
        - address user
      summary: create addressUser
      operationId: create addressUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/addressUser"
            example:
              "STREET_ADDRESS": "212 Mai Dang Chon"
              "CITY": "Da Nang"
              "STATE": "Da Nang"
              "ZIP_CODE": "50000"
              "PROFILE_ID": "1"

      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/addressUser/getAllAddressUser:
    get:
      tags:
        - address user
      summary: get all addressUser
      operationId: get all addressUser
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []

  /api/addressUser/getAddressUserId/{addressUserId}:
    get:
      tags:
        - address user
      summary: get  addressUser id
      operationId: get addressUser id
      parameters:
        - name: addressUserId
          in: path
          description: Please provide addressUserId
          required: true
          schema:
            type: string
            example: "1"
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/addressUser/updateAddressUser/{addressUserId}:
    patch:
      tags:
        - address user
      summary: update addressUser
      operationId: update addressUser
      parameters:
        - name: addressUserId
          in: path
          description: Please provide addressUserId
          required: true
          schema:
            type: string
            example: "1"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/addressUser"
            example:
              "STREET_ADDRESS": "212 Mai Dang Chon"
              "CITY": "Da Nang"
              "STATE": "Da Nang"
              "ZIP_CODE": "50000"
              "PROFILE_ID": "1"

      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/addressUser/deleteAddressUser/{addressUserId}:
    delete:
      tags:
        - address user
      summary: delete addressUser
      operationId: delete addressUser
      parameters:
        - name: addressUserId
          in: path
          description: Please provide addressUserId
          required: true
          schema:
            type: string
            example: "1"
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []

  /api/blog/createBlog:
    post:
      tags:
        - Blog
      summary: create Blog
      operationId: create Blog
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                TITLE:
                  type: string
                DESC:
                  type: string
              required:
                - TITLE
                - DESC
                - image
            example:
              pdfFile: [binary-data]
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/blog/getAllBlog:
    get:
      tags:
        - Blog
      summary: get Blog
      operationId: get Blog
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/blog/getBlogId/{BlogId}:
    get:
      tags:
        - Blog
      summary: get Blog id
      operationId: get Blog id
      parameters:
        - name: BlogId
          in: path
          description: Please provide Blog id
          required: true
          schema:
            type: string
            example: "1"
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/blog/updateBlog/{BlogId}:
    patch:
      tags:
        - Blog
      summary: update Blog
      operationId: update Blog
      parameters:
        - name: BlogId
          in: path
          description: Please provide Blog id
          required: true
          schema:
            type: string
            example: "1"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                TITLE:
                  type: string
                DESC:
                  type: string
            example:
              pdfFile: [binary-data]
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/blog/deleteBlog/{BlogId}:
    delete:
      tags:
        - Blog
      summary: delete Blog id
      operationId: delete Blog id
      parameters:
        - name: BlogId
          in: path
          description: Please provide Blog id
          required: true
          schema:
            type: string
            example: "1"
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []

  /api/commentBlog/likeBlog:
    post:
      tags:
        - commentBlog
      summary: like Blog
      operationId: like Blog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/likeBlog"
            example:
              "LIKE": "true"
              "BLOG_ID": "1"

      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []

  /api/commentBlog/createCommentBlog:
    post:
      tags:
        - commentBlog
      summary: create commentBlog
      operationId: create commentBlog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/commentBlog"
            example:
              "CONTENT": "aaaa"
              "BLOG_ID": "1"

      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/commentBlog/getCommentBlogId/{commentBlogId}:
    get:
      tags:
        - commentBlog
      summary: get  commentBlog id
      operationId: get commentBlog id
      parameters:
        - name: commentBlogId
          in: path
          description: Please provide commentBlogId
          required: true
          schema:
            type: string
            example: "1"
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/commentBlog/updateCommentBlog/{commentBlogId}:
    patch:
      tags:
        - commentBlog
      summary: update commentBlog
      operationId: update commentBlog
      parameters:
        - name: commentBlogId
          in: path
          description: Please provide commentBlogId
          required: true
          schema:
            type: string
            example: "1"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/commentBlog"
            example:
              "CONTENT": "aaaa"
              "BLOG_ID": "1"

      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/commentBlog/deleteCommentBlog/{commentBlogId}:
    delete:
      tags:
        - commentBlog
      summary: delete commentBlog
      operationId: delete commentBlog
      parameters:
        - name: commentBlogId
          in: path
          description: Please provide commentBlogId
          required: true
          schema:
            type: string
            example: "1"
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  #product
  /api/product/createProduct:
    post:
      tags:
        - Product
      summary: create Product
      operationId: createProduct
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                NAME:
                  type: string
                PRICE:
                  type: number
                STOCK:
                  type: number
                CD:
                  type: string
                CATEGORY_ID:
                  type: number
                DESC:
                  type: string

              example:
                image: "binary-data"
                NAME: "Product Name"
                PRICE: 20.0
                STOCK: 100
                PRODUCT_ATTRIBUTE:
                  - key: "Color"
                    value: "Blue"
                  - key: "Size"
                    value: "Medium"
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []

  /api/product/getAllProduct:
    get:
      tags:
        - Product
      summary: get Product
      operationId: get Product
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/product/getProductId/{ProductId}:
    get:
      tags:
        - Product
      summary: get Product id
      operationId: get Product id
      parameters:
        - name: ProductId
          in: path
          description: Please provide Product id
          required: true
          schema:
            type: string
            example: "1"
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/product/updateProduct/{ProductId}:
    patch:
      tags:
        - Product
      summary: update Product
      operationId: update Product
      parameters:
        - name: ProductId
          in: path
          description: Please provide Product id
          required: true
          schema:
            type: string
            example: "1"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                NAME:
                  type: string
                PRICE:
                  type: number
                STOCK:
                  type: number
                CATEGORY_ID:
                  type: number
                CD:
                  type: string
                DESC:
                  type: string
            example:
              pdfFile: [binary-data]
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/product/deleteProduct/{ProductId}:
    delete:
      tags:
        - Product
      summary: delete Product id
      operationId: delete Product id
      parameters:
        - name: ProductId
          in: path
          description: Please provide Product id
          required: true
          schema:
            type: string
            example: "1"
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/product/searchProduct:
    post:
      tags:
        - Product
      summary: search product
      operationId: search product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/product"
            example:
              "name": "ghe nhua"

      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/product/getProductOfCategory/{categoryId}:
    get:
      tags:
        - Product
      summary: get  category Id
      operationId: get category Id
      parameters:
        - name: categoryId
          in: path
          description: Please provide categoryId
          required: true
          schema:
            type: string
            example: "1"
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  #cart
  /api/cart/addProductCart/{productId}:
    post:
      tags:
        - cart
      summary: add product into cart
      operationId: add product into cart
      parameters:
        - name: productId
          in: path
          description: Please provide productId
          required: true
          schema:
            type: string
            example: "1"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/commentBlog"
            example:
              "QUANTITY": "1"

      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/cart/getAllProductCart:
    get:
      tags:
        - cart
      summary: get all product into cart
      operationId: get all product into cart
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/cart/updateQuantity/{productId}:
    patch:
      tags:
        - cart
      summary: update quantity product into cart
      operationId: update quantity product into cart
      parameters:
        - name: productId
          in: path
          description: Please provide productId
          required: true
          schema:
            type: string
            example: "1"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/commentBlog"
            example:
              "QUANTITY": "1"

      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/cart/deleteProductCart/{productId}:
    delete:
      tags:
        - cart
      summary: delete product into cart
      operationId: delete product into cart
      parameters:
        - name: productId
          in: path
          description: Please provide productId
          required: true
          schema:
            type: string
            example: "1"

      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  #checkout
  /api/checkout/orders/{orderID}/capture:
    get:
      tags:
        - checkout
      summary: checkout
      operationId: checkout
      parameters:
        - name: orderID
          in: path
          description: Please provide orderID
          required: true
          schema:
            type: string
            example: "1"

      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/checkout/orders:
    post:
      tags:
        - checkout
      summary: create checkout
      operationId: create checkout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/commentBlog"
            example:
              "MONEY": "100"

      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  #rate product
  /api/rateProduct/createRateProduct:
    post:
      tags:
        - RateProduct
      summary: create RateProduct
      operationId: create RateProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RateProduct"
            example:
              "RATE": "5"
              "PRODUCT_ID": "1"

      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/rateProduct/getAllRateProduct:
    get:
      tags:
        - RateProduct
      summary: get all RateProduct
      operationId: get all RateProduct
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/rateProduct/getRateProductId/{RateProductId}:
    get:
      tags:
        - RateProduct
      summary: get id RateProduct
      operationId: get id RateProduct
      parameters:
        - name: RateProductId
          in: path
          description: Please provide RateProductId
          required: true
          schema:
            type: string
            example: "1"
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/rateProduct/updateRateProduct/{RateProductId}:
    patch:
      tags:
        - RateProduct
      summary: update RateProduct
      operationId: update RateProduct
      parameters:
        - name: RateProductId
          in: path
          description: Please provide RateProductId
          required: true
          schema:
            type: string
            example: "1"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RateProduct"
            example:
              "RATE": "5"
              "PRODUCT_ID": "1"

      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/rateProduct/deleteRateProduct/{RateProductId}:
    delete:
      tags:
        - RateProduct
      summary: delete RateProduct
      operationId: delete RateProduct
      parameters:
        - name: RateProductId
          in: path
          description: Please provide RateProductId
          required: true
          schema:
            type: string
            example: "1"
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/rateProduct/avgRateProduct:
    post:
      tags:
        - RateProduct
      summary: get avg RateProduct
      operationId: get avg RateProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RateProduct"
            example:
              "PRODUCT_ID": "5"
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  #discount type
  /api/discountType/createDiscountType:
    post:
      tags:
        - DiscountType
      summary: create DiscountType
      operationId: create DiscountType
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DiscountType"
            example:
              "NAME": "discount 20%"
              "VALUE": "0.2"

      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/discountType/getAllDiscountType:
    get:
      tags:
        - DiscountType
      summary: get all DiscountType
      operationId: get all DiscountType
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/discountType/getDiscountTypeId/{DiscountTypeId}:
    get:
      tags:
        - DiscountType
      summary: get id DiscountType
      operationId: get id DiscountType
      parameters:
        - name: DiscountTypeId
          in: path
          description: Please provide DiscountTypeId
          required: true
          schema:
            type: string
            example: "1"
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/discountType/updateDiscountType/{DiscountTypeId}:
    patch:
      tags:
        - DiscountType
      summary: update DiscountType
      operationId: update DiscountType
      parameters:
        - name: DiscountTypeId
          in: path
          description: Please provide DiscountTypeId
          required: true
          schema:
            type: string
            example: "1"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DiscountType"
            example:
              "NAME": "discount 30%"
              "VALUE": "0.3"

      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/discountType/deleteDiscountType/{DiscountTypeId}:
    delete:
      tags:
        - DiscountType
      summary: delete DiscountType
      operationId: delete DiscountType
      parameters:
        - name: DiscountTypeId
          in: path
          description: Please provide DiscountTypeId
          required: true
          schema:
            type: string
            example: "1"
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  #disCount
  /api/discounts/createDiscount:
    post:
      tags:
        - Discount
      summary: create Discount
      operationId: create Discount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/discount"
            example:
              "CODE": "SIEUSALE2023"
              "START_DATE": "2023-11-12T00:00:00.000Z"
              "END_DATE": "2023-11-13T00:00:00.000Z"
              "USAGE_LIMIT": "10"
              "DISCOUNT_TYPE_ID": "1"

      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/discounts/getAllDiscount:
    get:
      tags:
        - Discount
      summary: get all Discount
      operationId: get all Discount
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/discounts/getDiscountId/{DiscountId}:
    get:
      tags:
        - Discount
      summary: get id Discount
      operationId: get id Discount
      parameters:
        - name: DiscountId
          in: path
          description: Please provide DiscountId
          required: true
          schema:
            type: string
            example: "1"
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/discounts/updateDiscount/{DiscountId}:
    patch:
      tags:
        - Discount
      summary: update Discount
      operationId: update Discount
      parameters:
        - name: DiscountId
          in: path
          description: Please provide DiscountId
          required: true
          schema:
            type: string
            example: "1"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/discount"
            example:
              "CODE": "SIEUSALE2023"
              "START_DATE": "2023-11-12T00:00:00.000Z"
              "END_DATE": "2023-11-13T00:00:00.000Z"
              "USAGE_LIMIT": "10"
              "IS_ACTIVE": "false"
              "DISCOUNT_TYPE_ID": "1"

      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/discounts/deleteDiscount/{DiscountId}:
    delete:
      tags:
        - Discount
      summary: delete Discount
      operationId: delete Discount
      parameters:
        - name: DiscountId
          in: path
          description: Please provide DiscountId
          required: true
          schema:
            type: string
            example: "1"
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []

  #order
  /api/order/createOrder:
    post:
      tags:
        - order
      summary: create order
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/order"
            example:
              NAME: "Nguyen Van Teo"
              NAME_CODE: "asdasd123e2r1eqwda233"
              ADDRESS: "thanh pho da nang - quan hai chau"
              PHONE: "012371212"
              TOTAL: "1111"
              TOTAL_DISCOUNTED: "1011"
              LIST_PRODUCT:
                - id: 60
                  QUANTITY: 6
                - id: 59
                  QUANTITY: 2

      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []

  /api/order/confirmOrder/{orderId}:
    patch:
      tags:
        - order
      summary: confirm order
      operationId: confirm order
      parameters:
        - name: orderId
          in: path
          description: Please provide DiscountId
          required: true
          schema:
            type: string
            example: "1"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/order"
            example:
              confirm: true
              

      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  
  /api/order/getAllOrder:
    get:
      tags:
        - order
      summary: get all order
      operationId: get all order
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/order/getOrderUser:
    get:
      tags:
        - order
      summary: get all order user
      operationId: get all order user
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []
  /api/order/getOrderId/{orderId}:
    get:
      tags:
        - order
      summary: get  order id
      operationId: get order id
      parameters:
        - name: orderId
          in: path
          description: Please provide orderId
          required: true
          schema:
            type: string
            example: "1"
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content: {}
        "401":
          description: UnAuthorized
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - JWT: []

components:
  schemas:
  securitySchemes:
    JWT:
      type: apiKey
      in: header
      name: Authorization
